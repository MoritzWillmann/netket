(netket_operator_api)=
# netket.operator

```{eval-rst}
.. currentmodule:: netket.operator

```

The Operator module defines the common interfaces used to interact with quantum operators and super-operators, as well as several concrete implementations of different operators such as netket.hilbert.LocalOperator, netket.hilbert.Ising and others.

NetKetâ€™s operators are all sub-classes of the abstract class netket.hilbert.AbstractOperator, which defines a small set of API respected by all implementations. The inheritance diagram for the class hierarchy of the Operators included with NetKet is shown below (you can click on the nodes in the graph to go to their API documentation page). Dashed nodes represent abstract classes that cannot be instantiated, while the others are concrete and they can be instantiated.



```{eval-rst}
.. inheritance-diagram:: netket.operator
   :top-classes: netket.operator.AbstractOperator
   :parts: 1

```

## Abstract Classes

Below you find a list of all public classes defined in this module

```{eval-rst}
.. autosummary::
   :toctree: _generated/operator
   :nosignatures:

   AbstractOperator
   AbstractSuperOperator
   DiscreteOperator
```

## Concrete Classes

```{eval-rst}
.. autosummary::
   :toctree: _generated/operator
   :nosignatures:

   BoseHubbard
   GraphOperator
   LocalOperator
   Ising
   Heisenberg
   PauliStrings
   LocalLiouvillian

```

## Pre-defined operators

```{eval-rst}
.. autosummary::
   :toctree: _generated/operator
   :nosignatures:

   boson.create
   boson.destroy
   boson.number
   boson.proj
   spin.sigmax
   spin.sigmay
   spin.sigmaz
   spin.sigmap
   spin.sigmam

```

## Continuous space operators

```{eval-rst}
.. autosummary::
   :toctree: _generated/operator
   :nosignatures:

   ContinuousOperator
   KineticEnergy
   PotentialEnergy
   SumOperator
```
